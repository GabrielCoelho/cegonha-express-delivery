package br.com.cegonhaexpress.cegonha_express.model.entity;

import static org.junit.jupiter.api.Assertions.*;

import br.com.cegonhaexpress.cegonha_express.model.enums.UF;
import jakarta.validation.ConstraintViolation;
import jakarta.validation.Validation;
import jakarta.validation.Validator;
import jakarta.validation.ValidatorFactory;
import java.util.Set;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Nested;
import org.junit.jupiter.api.Test;

/**
 * Testes unit√°rios para a entidade Endereco.
 *
 * <p>Demonstra testes de: - Valida√ß√µes Bean Validation para campos obrigat√≥rios - M√©todos
 * utilit√°rios de formata√ß√£o de CEP - Relacionamento com Cliente (bidirecional) - Construtores
 * customizados - M√©todos de neg√≥cio espec√≠ficos
 *
 * @author Gabriel Coelho Soares
 */
@DisplayName("Endereco Entity Tests")
class EnderecoTest {

  private Validator validator;
  private Endereco enderecoValido;
  private Cliente clienteValido;

  @BeforeEach
  void setUp() {
    ValidatorFactory factory = Validation.buildDefaultValidatorFactory();
    validator = factory.getValidator();

    enderecoValido =
        new Endereco("12345-678", "Rua das Flores", "100", "Centro", "S√£o Paulo", UF.SP);

    clienteValido =
        new Cliente("Jo√£o Silva", "joao@email.com", "(11) 99999-9999", "123.456.789-00");
  }

  @Nested
  @DisplayName("Testes de Constru√ß√£o")
  class TestesConstrutores {

    @Test
    @DisplayName("Deve criar endere√ßo com dados essenciais")
    void deveCriarEnderecoComDadosEssenciais() {
      System.out.println("\n=== TESTE: Cria√ß√£o de Endere√ßo com Dados Essenciais ===");

      // Arrange & Act
      Endereco endereco =
          new Endereco("87654-321", "Avenida Paulista", "1000", "Bela Vista", "S√£o Paulo", UF.SP);

      // Assert
      assertEquals("87654-321", endereco.getCep());
      assertEquals("Avenida Paulista", endereco.getLogradouro());
      assertEquals("1000", endereco.getNumero());
      assertEquals("Bela Vista", endereco.getBairro());
      assertEquals("S√£o Paulo", endereco.getCidade());
      assertEquals(UF.SP, endereco.getUf());
      assertNull(endereco.getComplemento());
      assertNull(endereco.getPontoReferencia());

      // Logs informativos
      System.out.println("‚úÖ Endere√ßo criado com sucesso!");
      System.out.println("üìç Dados do Endere√ßo:");
      System.out.println("   CEP: " + endereco.getCep());
      System.out.println("   Logradouro: " + endereco.getLogradouro());
      System.out.println("   N√∫mero: " + endereco.getNumero());
      System.out.println("   Bairro: " + endereco.getBairro());
      System.out.println("   Cidade: " + endereco.getCidade());
      System.out.println("   UF: " + endereco.getUf());
      System.out.println(
          "   Complemento: "
              + (endereco.getComplemento() != null ? endereco.getComplemento() : "N√£o informado"));
      System.out.println(
          "   Refer√™ncia: "
              + (endereco.getPontoReferencia() != null
                  ? endereco.getPontoReferencia()
                  : "N√£o informada"));
      System.out.println("   Endere√ßo completo: " + endereco.getEnderecoCompleto());
    }

    @Test
    @DisplayName("Deve criar endere√ßo completo com complemento")
    void deveCriarEnderecoCompletoComComplemento() {
      System.out.println("\n=== TESTE: Cria√ß√£o de Endere√ßo Completo ===");

      // Arrange & Act
      Endereco endereco =
          new Endereco("01310-100", "Avenida Paulista", "1578", "Bela Vista", "S√£o Paulo", UF.SP);
      endereco.setComplemento("14¬∫ andar - Conjunto 1401");
      endereco.setPontoReferencia("Pr√≥ximo ao metr√¥ Trianon-MASP");

      // Assert
      assertNotNull(endereco.getComplemento());
      assertNotNull(endereco.getPontoReferencia());
      assertTrue(endereco.isCompleto());

      // Logs informativos
      System.out.println("‚úÖ Endere√ßo completo criado com sucesso!");
      System.out.println("üìç Dados Completos do Endere√ßo:");
      System.out.println("   CEP: " + endereco.getCep());
      System.out.println(
          "   Logradouro: " + endereco.getLogradouro() + ", " + endereco.getNumero());
      System.out.println("   Complemento: " + endereco.getComplemento());
      System.out.println("   Bairro: " + endereco.getBairro());
      System.out.println("   Cidade/UF: " + endereco.getCidade() + " - " + endereco.getUf());
      System.out.println("   Refer√™ncia: " + endereco.getPontoReferencia());
      System.out.println("   Status completo: " + (endereco.isCompleto() ? "SIM" : "N√ÉO"));
      System.out.println("   üìã Endere√ßo formatado: " + endereco.getEnderecoCompleto());
    }
  }

  @Nested
  @DisplayName("Testes de Valida√ß√£o")
  class TestesValidacao {

    @Test
    @DisplayName("Deve aceitar endere√ßo v√°lido")
    void deveAceitarEnderecoValido() {
      System.out.println("\n=== TESTE: Valida√ß√£o de Endere√ßo V√°lido ===");

      // Act
      Set<ConstraintViolation<Endereco>> violations = validator.validate(enderecoValido);

      // Assert
      assertTrue(violations.isEmpty());

      // Logs informativos
      System.out.println("‚úÖ Endere√ßo passou em todas as valida√ß√µes!");
      System.out.println("üìç Endere√ßo Validado:");
      System.out.println("   " + enderecoValido.getEnderecoCompleto());
      System.out.println("   N√∫mero de viola√ß√µes: " + violations.size());
      System.out.println("   Status valida√ß√£o: APROVADO ‚úì");
    }

    @Test
    @DisplayName("Deve rejeitar CEP inv√°lido")
    void deveRejeitarCepInvalido() {
      System.out.println("\n=== TESTE: Valida√ß√£o de CEP Inv√°lido ===");

      // Arrange
      Endereco endereco =
          new Endereco(
              "123", // CEP inv√°lido
              "Rua A",
              "100",
              "Centro",
              "S√£o Paulo",
              UF.SP);

      // Act
      Set<ConstraintViolation<Endereco>> violations = validator.validate(endereco);

      // Assert
      assertFalse(violations.isEmpty());
      assertTrue(violations.stream().anyMatch(v -> v.getPropertyPath().toString().equals("cep")));

      // Logs informativos
      System.out.println("‚ùå Endere√ßo rejeitado por CEP inv√°lido (ESPERADO)");
      System.out.println("üìç Detalhes da Valida√ß√£o:");
      System.out.println("   CEP testado: " + endereco.getCep());
      System.out.println("   N√∫mero de viola√ß√µes: " + violations.size());
      violations.forEach(
          violation -> {
            System.out.println(
                "   ‚ö†Ô∏è Campo: "
                    + violation.getPropertyPath()
                    + " | Erro: "
                    + violation.getMessage());
          });
      System.out.println("   Status valida√ß√£o: REJEITADO (correto) ‚úì");
    }

    @Test
    @DisplayName("Deve rejeitar campos obrigat√≥rios em branco")
    void deveRejeitarCamposObrigatoriosEmBranco() {
      System.out.println("\n=== TESTE: Valida√ß√£o de Campos Obrigat√≥rios ===");

      // Arrange
      Endereco endereco = new Endereco();
      endereco.setCep(""); // Vazio
      endereco.setLogradouro(""); // Vazio
      endereco.setNumero(""); // Vazio
      endereco.setBairro(""); // Vazio
      endereco.setCidade(""); // Vazio
      // UF fica null

      // Act
      Set<ConstraintViolation<Endereco>> violations = validator.validate(endereco);

      // Assert
      assertFalse(violations.isEmpty());
      assertTrue(violations.size() >= 6); // Pelo menos 6 campos obrigat√≥rios

      // Logs informativos
      System.out.println("‚ùå Endere√ßo rejeitado por campos obrigat√≥rios vazios (ESPERADO)");
      System.out.println("üìç Detalhes das Viola√ß√µes:");
      System.out.println("   Total de viola√ß√µes: " + violations.size());
      violations.forEach(
          violation -> {
            System.out.println(
                "   ‚ö†Ô∏è Campo: "
                    + violation.getPropertyPath()
                    + " | Valor: '"
                    + violation.getInvalidValue()
                    + "' | Erro: "
                    + violation.getMessage());
          });
      System.out.println("   Status valida√ß√£o: M√öLTIPLAS FALHAS (correto) ‚úì");
    }
  }

  @Nested
  @DisplayName("Testes de M√©todos Utilit√°rios")
  class TestesMetodosUtilitarios {

    @Test
    @DisplayName("Deve formatar CEP corretamente")
    void deveFormatarCepCorretamente() {
      System.out.println("\n=== TESTE: Formata√ß√£o de CEP ===");

      // Test 1: CEP sem formata√ß√£o
      Endereco endereco1 = new Endereco("12345678", "Rua A", "100", "Centro", "S√£o Paulo", UF.SP);

      // Test 2: CEP j√° formatado
      Endereco endereco2 =
          new Endereco("87654-321", "Rua B", "200", "Vila", "Rio de Janeiro", UF.RJ);

      // Act & Assert
      assertEquals("12345678", endereco1.getCepLimpo());
      assertEquals("12345-678", endereco1.getCepFormatado());
      assertEquals("87654321", endereco2.getCepLimpo());
      assertEquals("87654-321", endereco2.getCepFormatado());

      // Logs informativos
      System.out.println("‚úÖ Formata√ß√£o de CEP funcionando corretamente!");
      System.out.println("üìç Teste 1 - CEP sem formata√ß√£o:");
      System.out.println("   CEP original: " + endereco1.getCep());
      System.out.println("   CEP limpo: " + endereco1.getCepLimpo());
      System.out.println("   CEP formatado: " + endereco1.getCepFormatado());
      System.out.println(
          "   Transforma√ß√£o: " + endereco1.getCep() + " ‚Üí " + endereco1.getCepFormatado());

      System.out.println("üìç Teste 2 - CEP j√° formatado:");
      System.out.println("   CEP original: " + endereco2.getCep());
      System.out.println("   CEP limpo: " + endereco2.getCepLimpo());
      System.out.println("   CEP formatado: " + endereco2.getCepFormatado());
      System.out.println(
          "   Mant√©m formata√ß√£o: " + endereco2.getCep() + " ‚Üí " + endereco2.getCepFormatado());
    }

    @Test
    @DisplayName("Deve gerar endere√ßo completo formatado")
    void deveGerarEnderecoCompletoFormatado() {
      System.out.println("\n=== TESTE: Gera√ß√£o de Endere√ßo Completo ===");

      // Arrange
      Endereco endereco =
          new Endereco("01310-100", "Avenida Paulista", "1578", "Bela Vista", "S√£o Paulo", UF.SP);
      endereco.setComplemento("14¬∫ andar");
      endereco.setPontoReferencia("Pr√≥ximo ao MASP");

      // Act
      String enderecoCompleto = endereco.getEnderecoCompleto();

      // Assert
      assertNotNull(enderecoCompleto);
      assertTrue(enderecoCompleto.contains("Avenida Paulista"));
      assertTrue(enderecoCompleto.contains("1578"));
      assertTrue(enderecoCompleto.contains("14¬∫ andar"));
      assertTrue(enderecoCompleto.contains("Bela Vista"));
      assertTrue(enderecoCompleto.contains("S√£o Paulo"));
      assertTrue(enderecoCompleto.contains("SP"));
      assertTrue(enderecoCompleto.contains("01310-100"));

      // Logs informativos
      System.out.println("‚úÖ Endere√ßo completo gerado com sucesso!");
      System.out.println("üìç Componentes do Endere√ßo:");
      System.out.println("   Logradouro: " + endereco.getLogradouro());
      System.out.println("   N√∫mero: " + endereco.getNumero());
      System.out.println("   Complemento: " + endereco.getComplemento());
      System.out.println("   Bairro: " + endereco.getBairro());
      System.out.println("   Cidade: " + endereco.getCidade());
      System.out.println("   UF: " + endereco.getUf());
      System.out.println("   CEP: " + endereco.getCepFormatado());
      System.out.println("   Refer√™ncia: " + endereco.getPontoReferencia());
      System.out.println("üè† Endere√ßo Completo Formatado:");
      System.out.println("   " + enderecoCompleto);
    }

    @Test
    @DisplayName("Deve validar endere√ßo completo")
    void deveValidarEnderecoCompleto() {
      System.out.println("\n=== TESTE: Valida√ß√£o de Completude do Endere√ßo ===");

      // Test 1: Endere√ßo completo
      Endereco enderecoCompleto =
          new Endereco("12345-678", "Rua A", "100", "Centro", "S√£o Paulo", UF.SP);

      // Test 2: Endere√ßo incompleto (sem CEP)
      Endereco enderecoIncompleto = new Endereco();
      enderecoIncompleto.setLogradouro("Rua B");
      enderecoIncompleto.setNumero("200");
      // CEP fica null

      // Assert
      assertTrue(enderecoCompleto.isCompleto());
      assertFalse(enderecoIncompleto.isCompleto());

      // Logs informativos
      System.out.println("‚úÖ Valida√ß√£o de completude funcionando!");
      System.out.println("üìç Teste 1 - Endere√ßo Completo:");
      System.out.println("   Endere√ßo: " + enderecoCompleto.getEnderecoCompleto());
      System.out.println(
          "   Status completo: " + (enderecoCompleto.isCompleto() ? "SIM ‚úì" : "N√ÉO ‚úó"));

      System.out.println("üìç Teste 2 - Endere√ßo Incompleto:");
      System.out.println(
          "   CEP: "
              + (enderecoIncompleto.getCep() != null ? enderecoIncompleto.getCep() : "AUSENTE"));
      System.out.println("   Logradouro: " + enderecoIncompleto.getLogradouro());
      System.out.println(
          "   Status completo: "
              + (enderecoIncompleto.isCompleto() ? "SIM ‚úì" : "N√ÉO ‚úó (esperado)"));
    }
  }

  @Nested
  @DisplayName("Testes de Relacionamento com Cliente")
  class TestesRelacionamento {

    @Test
    @DisplayName("Deve estabelecer relacionamento com cliente")
    void deveEstabelecerRelacionamentoComCliente() {
      System.out.println("\n=== TESTE: Relacionamento Endereco-Cliente ===");

      // Arrange & Act
      enderecoValido.setCliente(clienteValido);

      // Assert
      assertEquals(clienteValido, enderecoValido.getCliente());
      assertNotNull(enderecoValido.getCliente());

      // Logs informativos
      System.out.println("‚úÖ Relacionamento estabelecido com sucesso!");
      System.out.println("üìç Detalhes do Relacionamento:");
      System.out.println("   Endere√ßo: " + enderecoValido.getEnderecoCompleto());
      System.out.println(
          "   Cliente associado: "
              + (enderecoValido.getCliente() != null
                  ? enderecoValido.getCliente().getNome()
                  : "Nenhum"));
      System.out.println(
          "   CPF do cliente: "
              + (enderecoValido.getCliente() != null
                  ? enderecoValido.getCliente().getCpf()
                  : "N/A"));
      System.out.println(
          "   Relacionamento v√°lido: " + (enderecoValido.getCliente() != null ? "SIM ‚úì" : "N√ÉO ‚úó"));
    }

    @Test
    @DisplayName("Deve funcionar sem cliente associado")
    void deveFuncionarSemClienteAssociado() {
      System.out.println("\n=== TESTE: Endere√ßo Sem Cliente Associado ===");

      // Act & Assert
      assertNull(enderecoValido.getCliente());
      assertTrue(enderecoValido.isCompleto());

      // Logs informativos
      System.out.println("‚úÖ Endere√ßo funciona independentemente de cliente!");
      System.out.println("üìç Detalhes do Endere√ßo Independente:");
      System.out.println("   Endere√ßo: " + enderecoValido.getEnderecoCompleto());
      System.out.println(
          "   Cliente associado: "
              + (enderecoValido.getCliente() != null
                  ? enderecoValido.getCliente().getNome()
                  : "Nenhum"));
      System.out.println(
          "   Status completo: " + (enderecoValido.isCompleto() ? "SIM ‚úì" : "N√ÉO ‚úó"));
      System.out.println("   Funcionalidade independente: CONFIRMADA ‚úì");
    }
  }

  @Nested
  @DisplayName("Testes de Valida√ß√£o de CEP")
  class TestesValidacaoCep {

    @Test
    @DisplayName("Deve aceitar CEP com h√≠fen")
    void deveAceitarCepComHifen() {
      System.out.println("\n=== TESTE: Valida√ß√£o CEP com H√≠fen ===");

      Endereco endereco = new Endereco("12345-678", "Rua A", "100", "Centro", "S√£o Paulo", UF.SP);
      Set<ConstraintViolation<Endereco>> violations = validator.validate(endereco);

      assertTrue(violations.stream().noneMatch(v -> v.getPropertyPath().toString().equals("cep")));

      // Logs informativos
      System.out.println("‚úÖ CEP com h√≠fen aceito pela valida√ß√£o!");
      System.out.println("üìç Detalhes da Valida√ß√£o de CEP:");
      System.out.println("   CEP testado: " + endereco.getCep());
      System.out.println("   Formato: COM h√≠fen (00000-000)");
      System.out.println(
          "   Viola√ß√µes de CEP: "
              + violations.stream()
                  .filter(v -> v.getPropertyPath().toString().equals("cep"))
                  .count());
      System.out.println("   Status: APROVADO ‚úì");
    }

    @Test
    @DisplayName("Deve aceitar CEP sem h√≠fen")
    void deveAceitarCepSemHifen() {
      System.out.println("\n=== TESTE: Valida√ß√£o CEP sem H√≠fen ===");

      Endereco endereco = new Endereco("12345678", "Rua A", "100", "Centro", "S√£o Paulo", UF.SP);
      Set<ConstraintViolation<Endereco>> violations = validator.validate(endereco);

      assertTrue(violations.stream().noneMatch(v -> v.getPropertyPath().toString().equals("cep")));

      // Logs informativos
      System.out.println("‚úÖ CEP sem h√≠fen aceito pela valida√ß√£o!");
      System.out.println("üìç Detalhes da Valida√ß√£o de CEP:");
      System.out.println("   CEP testado: " + endereco.getCep());
      System.out.println("   Formato: SEM h√≠fen (00000000)");
      System.out.println(
          "   Viola√ß√µes de CEP: "
              + violations.stream()
                  .filter(v -> v.getPropertyPath().toString().equals("cep"))
                  .count());
      System.out.println("   Status: APROVADO ‚úì");
      System.out.println("   üîÑ Ambos os formatos funcionam: COM e SEM h√≠fen!");
    }

    @Test
    @DisplayName("Deve rejeitar CEP com formato inv√°lido")
    void deveRejeitarCepComFormatoInvalido() {
      System.out.println("\n=== TESTE: Rejei√ß√£o de CEP Inv√°lido ===");

      String[] cepsInvalidos = {"123", "12345-67890", "abcde-fgh", "", "12.345-678"};

      for (String cepInvalido : cepsInvalidos) {
        Endereco endereco = new Endereco(cepInvalido, "Rua A", "100", "Centro", "S√£o Paulo", UF.SP);
        Set<ConstraintViolation<Endereco>> violations = validator.validate(endereco);

        assertTrue(
            violations.stream().anyMatch(v -> v.getPropertyPath().toString().equals("cep")),
            "CEP '" + cepInvalido + "' deveria ser rejeitado");

        System.out.println("‚ùå CEP '" + cepInvalido + "' rejeitado corretamente");
      }

      // Logs informativos
      System.out.println("‚úÖ Todos os CEPs inv√°lidos foram rejeitados!");
      System.out.println("üìç CEPs testados e rejeitados:");
      for (String cep : cepsInvalidos) {
        System.out.println("   ‚ùå '" + cep + "' - REJEITADO ‚úì");
      }
      System.out.println("   Valida√ß√£o de formato: FUNCIONANDO CORRETAMENTE ‚úì");
    }
  }

  @Nested
  @DisplayName("Testes de Enum UF")
  class TestesEnumUF {

    @Test
    @DisplayName("Deve aceitar todos os estados brasileiros")
    void deveAceitarTodosEstadosBrasileiros() {
      System.out.println("\n=== TESTE: Valida√ß√£o de Estados Brasileiros ===");

      UF[] estados = {UF.SP, UF.RJ, UF.MG, UF.RS, UF.SC, UF.PR, UF.BA, UF.GO};
      int estadosTestados = 0;

      for (UF estado : estados) {
        Endereco endereco = new Endereco("12345-678", "Rua A", "100", "Centro", "Cidade", estado);
        Set<ConstraintViolation<Endereco>> violations = validator.validate(endereco);

        assertTrue(violations.stream().noneMatch(v -> v.getPropertyPath().toString().equals("uf")));

        estadosTestados++;
        System.out.println("‚úÖ Estado " + estado + " aceito corretamente");
      }

      // Logs informativos
      System.out.println("‚úÖ Valida√ß√£o de UF funcionando para todos os estados!");
      System.out.println("üìç Resumo da Valida√ß√£o:");
      System.out.println("   Estados testados: " + estadosTestados);
      System.out.println("   Estados aprovados: " + estadosTestados);
      System.out.println("   Taxa de sucesso: 100% ‚úì");
      System.out.println("   Enum UF: FUNCIONANDO CORRETAMENTE ‚úì");
    }
  }
}
